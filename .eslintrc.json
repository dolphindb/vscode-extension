{
    "$schema": "./.eslintrc.schema.json",
    
    "root": true,
    
    "ignorePatterns": [
        "**/*.d.ts",
        "/test/"
    ],
    
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": "./tsconfig.json",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    
    "plugins": [
        "@typescript-eslint",
        "react"
    ],
    
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    
    "env": {
        "node": true,
        "browser": true
    },
    
    "rules": {
        "@typescript-eslint/semi": ["error", "never"],
        "@typescript-eslint/no-extra-semi": "error",
        "semi-style": ["error", "first"],
        
        // 使用 ===
        "eqeqeq": "error",
        
        // 父类尽量返回 this 类型
        "@typescript-eslint/prefer-return-this-type": "error",
        
        // 尽量使用 . 访问属性而不是 []
        "@typescript-eslint/dot-notation": "error",
        
        // 必须 throw Error
        "@typescript-eslint/no-throw-literal": "error",
        
        // ------------ async
        // 返回 Promise 的函数一定要标记为 async 函数
        "@typescript-eslint/promise-function-async": "error",
        
        // 不要 return await promise, 直接 return promise, 除非外面有 try catch
        "@typescript-eslint/return-await": "error",
        
        // ------------ 括号
        
        // a => { } 而不是 (a) => { }
        "arrow-parens": ["error", "as-needed", { "requireForBlockBody": false }],
        
        // 不要多余的大括号
        // if (true)
        //     console.log()
        "curly": ["error", "multi"],
        
        // 简单属性不要冗余的大括号 <Component prop='simple-value' />
        "react/jsx-curly-brace-presence": ["error", "never"],
        
        // if 的 body 必须换行
        "nonblock-statement-body-position": ["error", "below"],
        
        // ------------ 空格
        
        // { a, b } 这样的对象，大括号里面要有空格
        "@typescript-eslint/object-curly-spacing": ["error", "always"],
        
        // [a, b, c]
        "@typescript-eslint/comma-spacing": "error",
        
        // foo()
        "@typescript-eslint/func-call-spacing": "error",
        
        // a => { } 中箭头左右两边空格
        "arrow-spacing": ["error"],
        
        // 注释双斜杠后面要有空格
        "spaced-comment": ["error", "always", { "markers": ["/"] }],
        
        // 函数声明中，名称后面要有空格
        "@typescript-eslint/space-before-function-paren": "error",
        
        // { return true } 这样的 block 大括号里面要有空格
        "block-spacing": ["error", "always"],
        
        // aaa: 123
        "@typescript-eslint/key-spacing": ["error", { "beforeColon": false, "afterColon": true, "mode": "minimum" }],
        
        // aaa: string
        "@typescript-eslint/type-annotation-spacing": ["error"],
        
        // if ()
        "@typescript-eslint/keyword-spacing": ["error", { "before": true, "after": true }],
        
        // if (1) { }
        "@typescript-eslint/space-before-blocks": "error",
        
        // a + b
        "@typescript-eslint/space-infix-ops": "error",
        
        // <Hello name={firstname} />
        "react/jsx-equals-spacing": ["error", "never"],
        
        // 不允许使用 tab
        "no-tabs": "error",
        
        // 使用 \n 换行
        "linebreak-style": ["error", "unix"],
        
        // 文件以 \n 结尾
        "eol-last": ["error", "always"],
        
        // ------------ 引号
        
        // 用单引号
        "jsx-quotes": ["error", "prefer-single"],
        
        // 用单引号
        "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": false }],
        
        // 不要冗余的引号包裹属性
        "quote-props": ["error", "as-needed", { "keywords": false, "unnecessary": true }],
        
        // ------------ 其它
        // boolean 属性不要冗余的 ={true} <Component boolprop />
        "react/jsx-boolean-value": ["error", "never"],
        
        // 没有 children 的 Component 写成闭合标签 <Component />
        "react/self-closing-comp": "error",
        
        // 单行类型声明用 `,` 分割，多行类型声明结尾不要加分号
        "@typescript-eslint/member-delimiter-style": ["error", {
            "multiline": {
                "delimiter": "none",
                "requireLast": false
            },
            "singleline": {
                "delimiter": "comma",
                "requireLast": false
            }
        }],
        
        "@typescript-eslint/prefer-includes": "error",
        
        "@typescript-eslint/prefer-regexp-exec": "error"
    }
}
